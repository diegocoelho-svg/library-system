generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LoanStatus {
  emprestado
  devolvido
  atrasado
}

enum BookStatus {
  DISPONIVEL @map("disponível")
  RESERVADO @map("reservado")
  INDISPONIVEL @map("indisponível")
}

enum UserRole {
  administrator
  collaborator
}

model User {
  id Int @id @default(autoincrement())
  name String
  matricula Int @unique
  role UserRole @default(collaborator)
  password String

  loans Loan[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Loan {
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  bookCopyId Int @map("book_id")
  loanDate DateTime @default(now()) @map("loan_date")
  dueDate DateTime @map("due_date")
  returnDate DateTime? @map("return_date")
  status LoanStatus @default(emprestado)

  user User @relation(fields: [userId], references: [id])
  book BookCopy @relation(fields: [bookCopyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  histories LoanHistory[]
  
  @@map("loans")
}

model LoanHistory {
  id Int @id @default(autoincrement())
  loanId Int @map("loan_id")
  status LoanStatus
  date DateTime @default(now())

  loan Loan @relation(fields: [loanId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

}

model Book {
  id Int @id @default(autoincrement())
  title String
  normalizedTitle String @unique
  author String
  category String
  description String?
  copies BookCopy[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("books")
}

model BookCopy {
  id Int @id @default(autoincrement())
  inventoryCode String @unique
  bookId Int @map("book_id")
  status BookStatus @default(DISPONIVEL)

  book Book @relation(fields: [bookId], references: [id])

  loans Loan[]
}